plugins {
    id 'java'
    id "jacoco"
    id "idea"
    id 'org.springframework.boot' version '3.4.0'
    id 'io.spring.dependency-management' version '1.1.6'
    id "org.sonarqube" version "4.3.0.3225"
    id "org.owasp.dependencycheck" version "8.0.2"
}

group = 'co.leapwise.assignments'
version = '1.0.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file("src/integration-test/java")
        }
        resources.srcDir file("src/integration-test/resources")
    }
}

idea {
    module {
        testSources.from(project.sourceSets.integrationTest.java.srcDirs)
    }
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-dependencies:3.4.0"
    }
}

dependencies {
    // spring stuff
    implementation 'org.springframework:spring-web'
    implementation 'org.springframework.data:spring-data-jpa'
    implementation 'org.springframework.boot:spring-boot-actuator-autoconfigure'
    implementation 'org.springframework.boot:spring-boot-actuator'
    // database
    implementation 'org.hibernate.orm:hibernate-core'
    implementation 'org.flywaydb:flyway-core'
    // validation
    implementation 'org.hibernate.validator:hibernate-validator'
    implementation 'org.apache.tomcat.embed:tomcat-embed-el'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'

    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
}

test {
    useJUnitPlatform {
    }
    testLogging.showStandardStreams = false
    testLogging.exceptionFormat = "full"
}

tasks.register("integrationTest", Test) {
    useJUnitPlatform {
        excludeTags "e2eTest"
    }

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

tasks.register("e2eTest", Test) {
    useJUnitPlatform {
        includeTags "e2eTest"
    }

    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
}

jacocoTestReport {
    dependsOn test
    executionData test, integrationTest
    reports {
        xml.required = true
    }
}

sonar {
    properties {
        property "sonar.exclusions", "**/ExpressionEvaluatorApplication.java, **/*DTO.java, **/*Request.java, **/*Response.java, **/*Configuration.java, **/*Test.java, **/ApplicationError.java"
        property "sonar.projectKey", "ancronik_net_leapwise_expression_eval"
        property "sonar.organization", "ancronik-net"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}

dependencyCheck {
    failBuildOnCVSS = 7
    failOnError = false
    suppressionFiles = ["owasp/suppression.xml"]
    analyzers {
        assemblyEnabled = false
    }
}